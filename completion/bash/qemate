#!/bin/bash
################################################################################
# Qemate Bash Completion Script                                                #
# Provides tab completion for Qemate commands, subcommands, and options        #
################################################################################

_qemate_completion() {
    local cur prev words cword
    _init_completion || return

    # Qemate base directory for VMs
    local VM_DIR="${QEMATE_VM_DIR:-${HOME}/QVMs}"

    # Main commands
    local commands="vm net shared usb security help version"

    # Subcommands
    local vm_subcommands="create start stop delete resize list status configure"
    local net_subcommands="type model port"
    local net_port_subcommands="add remove"
    local shared_subcommands="add remove list"
    local usb_subcommands="add remove list"
    local security_subcommands="lock unlock"

    # Options for various commands
    local vm_create_opts="--memory --cores --disk-size --machine --os-type --enable-audio"
    local vm_start_opts="--headless --iso"
    local vm_stop_opts="--force"
    local vm_delete_opts="--force"
    local vm_resize_opts="--force"
    local vm_configure_opts="cores memory audio"

    # Values for specific options
    local vm_create_os_type_values="linux windows"
    local vm_create_machine_values="q35,accel=kvm pc,accel=tcg q35,accel=tcg pc,accel=kvm"
    local net_type_values="user nat none"
    local net_model_values="virtio-net-pci e1000 rtl8139"
    local shared_type_values="virtiofs 9p smb"

    # Helper function to get VM names
    _get_vm_names() {
        if [[ -d "$VM_DIR" ]]; then
            find "$VM_DIR" -maxdepth 1 -type d -not -path "$VM_DIR" -exec basename {} \; 2> /dev/null | sort -u
        fi
    }

    # Helper function to get mount tags for a VM
    _get_mount_tags() {
        local vm_name="$1"
        local config_file="$VM_DIR/$vm_name/config"
        if [[ -f "$config_file" ]]; then
            local shared_folders
            shared_folders=$(grep '^SHARED_FOLDERS=' "$config_file" | cut -d'=' -f2- | tr -d '"' | tr ',' '\n')
            if [[ -n "$shared_folders" ]]; then
                echo "$shared_folders" | while IFS=':' read -r _ tag _; do
                    [[ -n "$tag" ]] && echo "$tag"
                done
            fi
        fi
    }

    # Helper function to get USB devices for a VM
    _get_usb_devices() {
        local vm_name="$1"
        local config_file="$VM_DIR/$vm_name/config"
        if [[ -f "$config_file" ]]; then
            local usb_devices
            usb_devices=$(grep '^USB_DEVICES=' "$config_file" | cut -d'=' -f2- | tr -d '"' | tr ',' '\n')
            if [[ -n "$usb_devices" ]]; then
                echo "$usb_devices"
            fi
        fi
    }

    # First level: Main commands
    if [[ "$cword" -eq 1 ]]; then
        COMPREPLY=($(compgen -W "$commands" -- "$cur"))
        return
    fi

    # Second level: Subcommands and options
    case "${words[1]}" in
        vm)
            if [[ "$cword" -eq 2 ]]; then
                COMPREPLY=($(compgen -W "$vm_subcommands" -- "$cur"))
            else
                local vm_cmd="${words[2]}"
                case "$vm_cmd" in
                    create)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=()
                        else
                            if [[ "$prev" == "--iso" ]]; then
                                COMPREPLY=($(compgen -f -X '!*.iso' -- "$cur"))
                            elif [[ "$prev" == "--machine" ]]; then
                                COMPREPLY=($(compgen -W "$vm_create_machine_values" -- "$cur"))
                            elif [[ "$prev" == "--os-type" ]]; then
                                COMPREPLY=($(compgen -W "$vm_create_os_type_values" -- "$cur"))
                            elif [[ "$prev" == "--memory" || "$prev" == "--cores" || "$prev" == "--disk-size" ]]; then
                                COMPREPLY=()
                            else
                                COMPREPLY=($(compgen -W "$vm_create_opts" -- "$cur"))
                            fi
                        fi
                        ;;
                    start)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        else
                            if [[ "$prev" == "--iso" ]]; then
                                COMPREPLY=($(compgen -f -X '!*.iso' -- "$cur"))
                            else
                                COMPREPLY=($(compgen -W "$vm_start_opts" -- "$cur"))
                            fi
                        fi
                        ;;
                    stop)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        elif [[ "$cword" -eq 4 ]]; then
                            COMPREPLY=($(compgen -W "$vm_stop_opts" -- "$cur"))
                        else
                            COMPREPLY=()
                        fi
                        ;;
                    delete)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        elif [[ "$cword" -eq 4 ]]; then
                            COMPREPLY=($(compgen -W "$vm_delete_opts" -- "$cur"))
                        else
                            COMPREPLY=()
                        fi
                        ;;
                    resize)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        elif [[ "$cword" -eq 4 ]]; then
                            # Could be size or --force
                            COMPREPLY=($(compgen -W "$vm_resize_opts" -- "$cur"))
                        elif [[ "$cword" -eq 5 ]]; then
                            # If prev was a VM name and word[4] wasn't --force, this should be --force
                            if [[ "${words[4]}" != "--force" ]]; then
                                COMPREPLY=($(compgen -W "$vm_resize_opts" -- "$cur"))
                            else
                                COMPREPLY=()
                            fi
                        else
                            COMPREPLY=()
                        fi
                        ;;
                    status | configure)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        elif [[ "$vm_cmd" == "configure" && "$cword" -eq 4 ]]; then
                            COMPREPLY=($(compgen -W "$vm_configure_opts" -- "$cur"))
                        elif [[ "$vm_cmd" == "configure" && "$cword" -eq 5 ]]; then
                            if [[ "${words[4]}" == "audio" ]]; then
                                COMPREPLY=($(compgen -W "on off enable disable 1 0 true false" -- "$cur"))
                            else
                                COMPREPLY=()
                            fi
                        else
                            COMPREPLY=()
                        fi
                        ;;
                    list)
                        COMPREPLY=()
                        ;;
                esac
            fi
            ;;
        net)
            if [[ "$cword" -eq 2 ]]; then
                COMPREPLY=($(compgen -W "$net_subcommands" -- "$cur"))
            else
                local net_cmd="${words[2]}"
                case "$net_cmd" in
                    type)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        elif [[ "$cword" -eq 4 ]]; then
                            COMPREPLY=($(compgen -W "$net_type_values" -- "$cur"))
                        else
                            COMPREPLY=()
                        fi
                        ;;
                    model)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        elif [[ "$cword" -eq 4 ]]; then
                            COMPREPLY=($(compgen -W "$net_model_values" -- "$cur"))
                        else
                            COMPREPLY=()
                        fi
                        ;;
                    port)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$net_port_subcommands" -- "$cur"))
                        else
                            local port_cmd="${words[3]}"
                            case "$port_cmd" in
                                add | remove)
                                    if [[ "$cword" -eq 4 ]]; then
                                        COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                                    elif [[ "$cword" -eq 5 ]]; then
                                        # Port specification format: host:guest[:tcp|udp]
                                        COMPREPLY=()
                                    else
                                        COMPREPLY=()
                                    fi
                                    ;;
                            esac
                        fi
                        ;;
                esac
            fi
            ;;
        shared)
            if [[ "$cword" -eq 2 ]]; then
                COMPREPLY=($(compgen -W "$shared_subcommands" -- "$cur"))
            else
                local shared_cmd="${words[2]}"
                case "$shared_cmd" in
                    list)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        else
                            COMPREPLY=()
                        fi
                        ;;
                    add)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        elif [[ "$cword" -eq 4 ]]; then
                            # Folder path - complete directories
                            COMPREPLY=($(compgen -d -- "$cur"))
                        elif [[ "$cword" -eq 5 ]]; then
                            # Mount tag - user input, no completion
                            COMPREPLY=()
                        elif [[ "$cword" -eq 6 ]]; then
                            # Folder type: virtiofs, 9p, smb
                            COMPREPLY=($(compgen -W "$shared_type_values" -- "$cur"))
                        else
                            COMPREPLY=()
                        fi
                        ;;
                    remove)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        elif [[ "$cword" -eq 4 ]]; then
                            # Offer directories or mount tags
                            local vm_name="${words[3]}"
                            local tags=($(_get_mount_tags "$vm_name"))
                            COMPREPLY=($(compgen -d -- "$cur"))
                            COMPREPLY+=($(compgen -W "${tags[*]}" -- "$cur"))
                        else
                            COMPREPLY=()
                        fi
                        ;;
                esac
            fi
            ;;
        usb)
            if [[ "$cword" -eq 2 ]]; then
                COMPREPLY=($(compgen -W "$usb_subcommands" -- "$cur"))
            else
                local usb_cmd="${words[2]}"
                case "$usb_cmd" in
                    list)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        else
                            COMPREPLY=()
                        fi
                        ;;
                    add)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        elif [[ "$cword" -eq 4 ]]; then
                            # USB device ID format: vendor:product
                            # Optionally parse lsusb output if available
                            if command -v lsusb &> /dev/null; then
                                local usb_ids=($(lsusb | awk '{print $6}' | sort -u))
                                COMPREPLY=($(compgen -W "${usb_ids[*]}" -- "$cur"))
                            else
                                COMPREPLY=()
                            fi
                        else
                            COMPREPLY=()
                        fi
                        ;;
                    remove)
                        if [[ "$cword" -eq 3 ]]; then
                            COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
                        elif [[ "$cword" -eq 4 ]]; then
                            # Offer existing USB devices for this VM
                            local vm_name="${words[3]}"
                            local devices=($(_get_usb_devices "$vm_name"))
                            COMPREPLY=($(compgen -W "${devices[*]}" -- "$cur"))
                        else
                            COMPREPLY=()
                        fi
                        ;;
                esac
            fi
            ;;
        security)
            if [[ "$cword" -eq 2 ]]; then
                COMPREPLY=($(compgen -W "$security_subcommands" -- "$cur"))
            elif [[ "$cword" -eq 3 ]]; then
                COMPREPLY=($(compgen -W "$(_get_vm_names)" -- "$cur"))
            else
                COMPREPLY=()
            fi
            ;;
        help | version)
            COMPREPLY=()
            ;;
    esac

    return 0
}

# Register the completion function for the 'qemate' command
complete -F _qemate_completion qemate